32.1 What Is an Enterprise Bean?
（32.1 何为企业Bean?）
Written in the Java programming language, an enterprise bean is a server-side component that encapsulates the business logic of an application. The business logic is the code that fulfills the purpose of the application. In an inventory control application, for example, the enterprise beans might implement the business logic in methods called checkInventoryLevel and orderProduct. By invoking these methods, clients can access the inventory services provided by the application.
（用Java编程语言编写，一个企业bean是封装应用业务逻辑的服务端组件。业务逻辑是实现应用目的的代码。例如，在一个库存控制应用中，企业beans可用叫做checkInventoryLevel和orderProduct方法实现业务逻辑。通过调用这些方法，客户端可访问由应用提供的库存服务。）
32.1.1 Benefits of Enterprise Beans
（32.1.1 企业beans的有点）
For several reasons, enterprise beans simplify the development of large, distributed applications. First, because the EJB container provides system-level services to enterprise beans, the bean developer can concentrate on solving business problems. The EJB container, rather than the bean developer, is responsible for system-level services, such as transaction management and security authorization.
（就这几个理由而言，企业beans简化了大型分布式应用的开发。第一，因EJB容器过给企业beans提供了系统级的服务，bean开发者可集中精力解决业务问题。EJB容器，而不是bean开发者负责系统级服务，如事务管理和安全授权。）
Second, because the beans rather than the clients contain the application's business logic, the client developer can focus on the presentation of the client. The client developer does not have to code the routines that implement business rules or access databases. As a result, the clients are thinner, a benefit that is particularly important for clients that run on small devices.
（第二，因beans而非客户端包含应用业务逻辑，客户端开发者可集中精力于客户端的显示。客户端开发者不必编写实现业务规则或访问数据库的程序。）
Third, because enterprise beans are portable components, the application assembler can build new applications from existing beans. Provided that they use the standard APIs, these applications can run on any compliant Java EE server.
（第三，因企业beans是可移植的组件，应用装配器可从已有beans构建新应用。如果它们使用标准的APIs,这些应用可运行在任何兼容的Java EE服务器中。）
32.1.2 When to Use Enterprise Beans
（32.1.2 何时使用企业beans？）
You should consider using enterprise beans if your application has any of the following requirements.
（你应考虑使用企业beans如果你的应用有以下任何需求：）
The application must be scalable. To accommodate a growing number of users, you may need to distribute an application's components across multiple machines. Not only can the enterprise beans of an application run on different machines, but also their location will remain transparent to the clients.
（应用必须是可伸缩的（可大可小之义）。为适应越来越多的用户，你可能需要将一个应用的组件分布到多台机器上。一个应用的企业beans不仅可运行到多台机器上，而且它们的位置也可对客户端保持透明（即看不见之义）。）
Transactions must ensure data integrity. Enterprise beans support transactions, the mechanisms that manage the concurrent access of shared objects.
（事务必须确保数据完整性。企业beans支持事务，即管理共享对象同步访问的机制。）
The application will have a variety of clients. With only a few lines of code, remote clients can easily locate enterprise beans. These clients can be thin, various, and numerous.
（应用将有各种各样的客户端。只用几行代码，远程客户端可容易地定位到企业beans。这些客户端可能是thin,多样的和大量的。）
32.1.3 Types of Enterprise Beans
（32.1.3 类型）
Table 32-1 summarizes the two types of enterprise beans. The following sections discuss each type in more detail.

Table 32-1 Enterprise Bean Types

Enterprise Bean Type	Purpose
Session

Performs a task for a client; optionally, may implement a web service

Message-driven

Acts as a listener for a particular messaging type, such as the Java Message Service API

32.2 What Is a Session Bean?
（32.2何为session bean？）
A session bean encapsulates business logic that can be invoked programmatically by a client over local, remote, or web service client views. To access an application that is deployed on the server, the client invokes the session bean's methods. The session bean performs work for its client, shielding it from complexity by executing business tasks inside the server.

A session bean is not persistent. (That is, its data is not saved to a database.)

For code samples, see Chapter 34, "Running the Enterprise Bean Examples".

32.2.1 Types of Session Beans
Session beans are of three types: stateful, stateless, and singleton.

32.2.1.1 Stateful Session Beans
The state of an object consists of the values of its instance variables. In a stateful session bean, the instance variables represent the state of a unique client/bean session. Because the client interacts ("talks") with its bean, this state is often called the conversational state.

As its name suggests, a session bean is similar to an interactive session. A session bean is not shared; it can have only one client, in the same way that an interactive session can have only one user. When the client terminates, its session bean appears to terminate and is no longer associated with the client.

The state is retained for the duration of the client/bean session. If the client removes the bean, the session ends and the state disappears. This transient nature of the state is not a problem, however, because when the conversation between the client and the bean ends, there is no need to retain the state.

32.2.1.2 Stateless Session Beans
A stateless session bean does not maintain a conversational state with the client. When a client invokes the methods of a stateless bean, the bean's instance variables may contain a state specific to that client but only for the duration of the invocation. When the method is finished, the client-specific state should not be retained. Clients may, however, change the state of instance variables in pooled stateless beans, and this state is held over to the next invocation of the pooled stateless bean. Except during method invocation, all instances of a stateless bean are equivalent, allowing the EJB container to assign an instance to any client. That is, the state of a stateless session bean should apply across all clients.

Because they can support multiple clients, stateless session beans can offer better scalability for applications that require large numbers of clients. Typically, an application requires fewer stateless session beans than stateful session beans to support the same number of clients.

A stateless session bean can implement a web service, but a stateful session bean cannot.

32.2.1.3 Singleton Session Beans
A singleton session bean is instantiated once per application and exists for the lifecycle of the application. Singleton session beans are designed for circumstances in which a single enterprise bean instance is shared across and concurrently accessed by clients.

Singleton session beans offer similar functionality to stateless session beans but differ from them in that there is only one singleton session bean per application, as opposed to a pool of stateless session beans, any of which may respond to a client request. Like stateless session beans, singleton session beans can implement web service endpoints.

Singleton session beans maintain their state between client invocations but are not required to maintain their state across server crashes or shutdowns.

Applications that use a singleton session bean may specify that the singleton should be instantiated upon application startup, which allows the singleton to perform initialization tasks for the application. The singleton may perform cleanup tasks on application shutdown as well, because the singleton will operate throughout the lifecycle of the application.

32.2.2 When to Use Session Beans
Stateful session beans are appropriate if any of the following conditions are true.

The bean's state represents the interaction between the bean and a specific client.

The bean needs to hold information about the client across method invocations.

The bean mediates between the client and the other components of the application, presenting a simplified view to the client.

Behind the scenes, the bean manages the work flow of several enterprise beans.

To improve performance, you might choose a stateless session bean if it has any of these traits.

The bean's state has no data for a specific client.

In a single method invocation, the bean performs a generic task for all clients. For example, you might use a stateless session bean to send an email that confirms an online order.

The bean implements a web service.

Singleton session beans are appropriate in the following circumstances.

State needs to be shared across the application.

A single enterprise bean needs to be accessed by multiple threads concurrently.

The application needs an enterprise bean to perform tasks upon application startup and shutdown.

The bean implements a web service.

