1.1 What Is Messaging?(什么是消息通讯？)
Messaging is a method of communication between software components or applications. A messaging system is a peer-to-peer facility: A messaging client can send messages to, and receive messages from, any other client. Each client connects to a messaging agent that provides facilities for creating, sending, receiving, and reading messages.（消息通讯是软件组件或应用之间通讯的一种方式。一个通讯系统是一个对等（peer-to-peer区别server/client）的设施：一个通讯客户端可发送消息给任何其他客户端或接受来自任何其他客户端的消息。每个客户端是连接到一个提供创建、发送、接受和读取消息工具（facilities）的通讯代理（agent）。）

Messaging enables distributed communication that is loosely coupled. A component sends a message to a destination, and the recipient can retrieve the message from the destination. What makes the communication loosely coupled is that the destination is all that the sender and receiver have in common. The sender and the receiver do not have to be available at the same time in order to communicate. In fact, the sender does not need to know anything about the receiver; nor does the receiver need to know anything about the sender. The sender and the receiver need to know only which message format and which destination to use. In this respect, messaging differs from tightly coupled technologies, such as Remote Method Invocation (RMI), which require an application to know a remote application's methods.
（Messaging 实现了松耦合的分布式通讯。一个组件将消息发送到一个目的地，然后消息接受者可从此目的地获取（retrieve）此消息。使通讯成为松耦合的是目的地是发送者和接受者共有的唯一东西。为了通讯两者不必同时可用（available）。事实上，发送者不必知晓接受者的任何东西；接受者也一样。两者只需知道所使用的消息格式和目的地。在这方面，messaging 不同于紧耦合技术，如需应用了解远程应用方法的远程方法调用（RMI）。）
Messaging also differs from electronic mail (email), which is a method of communication between people or between software applications and people. Messaging is used for communication between software applications or software components.
（Messaging 也不同于电子邮件（email），一种人与人之间或软件应用之间通讯的方式。Messaging 用于软件应用或软件组件之间的通讯。）
1.2  What Is the JMS API?（什么是JMS API）
The Java Message Service is a Java API that allows applications to create, send, receive, and read messages. The JMS API defines a common set of interfaces and associated semantics that allow programs written in the Java programming language to communicate with other messaging implementations.
（Java 消息服务是可让应用创建、发送、接受和读取消息的一个Java API。JMS API 定义了一套接口和相关的语义，可让Java程序与其他通讯应用实现通讯。）

The JMS API minimizes the set of concepts a programmer must learn in order to use messaging products but provides enough features to support sophisticated messaging applications. It also strives to maximize the portability of JMS applications across JMS providers.
（JMS API 最大化地减少了程序员为使用messaging产品而必须学习的概念，但提供了足够多的功能来支持复杂messaging应用（的创建）。它也努力最大化JMS应用在JMS providers间的可移植性。）
JMS enables communication that is not only loosely coupled but also
（JMS 使得通讯不仅是松耦合的，而且）
Asynchronous: A receiving client does not have to receive messages at the same time the sending client sends them. The sending client can send them and go on to other tasks; the receiving client can receive them much later.
（异步：接受客户端不必在发送客户端放松消息时接收它们。发送客户端可发送它们然后继续其他任务；接收客户端可稍后接收它们。）
Reliable: A messaging provider that implements the JMS API can ensure that a message is delivered once and only once. Lower levels of reliability are available for applications that can afford to miss messages or to receive duplicate messages.
（可靠：一个实现JMS API的messaging provider（消息通讯的提供者或支持者，一般是程序）可确保一条消息只发送一次。较低级别的可靠性可用于可能会丢失消息或接收重复消息的应用。）
The current version of the JMS specification is Version 2.0. You can download a copy of the specification from the Java Community Process website: http://www.jcp.org/en/jsr/detail?id=343.
（JMS 规范的当前版本是2.0。你可从JCP网站下载此规范的副本：http://www.jcp.org/en/jsr/detail?id=343。）
1.3 When Can You Use the JMS API?（何时可使用JMS API?）
An enterprise application provider is likely to choose a messaging API over a tightly coupled API, such as a remote procedure call (RPC), under the following circumstances.
（在以下情况下，相较于一个紧耦合的API,如远程过程调用（RPC）,一个企业应用的提供商更可能选择一个messaging API：）

The provider wants the components not to depend on information about other components' interfaces, so components can be easily replaced.
(提供商想组件不依赖其他组件接口信息，这样组件易于替换。)
The provider wants the application to run whether or not all components are up and running simultaneously.
（提供商想应用仍然运行，不管是否所有组件都同时上线和运行。）
The application business model allows a component to send information to another and to continue to operate without receiving an immediate response.
（应用业务模型可让一个组件向另一个发送信息并且继续运转而不必接收一个立即的响应。）
For example, components of an enterprise application for an automobile manufacturer can use the JMS API in situations like the following.
（例如，提供给一个汽车生产商的企业应用的组件在如下情况下可使用JMS API:）
The inventory component can send a message to the factory component when the inventory level for a product goes below a certain level so the factory can make more cars.
（当一个产品的库存级别低于某个级别时，库存组件可发送消息给工厂组件以便工厂生产更多汽车。）
The factory component can send a message to the parts components so the factory can assemble the parts it needs.
（工厂组件可发送消息给零件组件以便工厂可装配所需的零件）
The parts components in turn can send messages to their own inventory and order components to update their inventories and to order new parts from suppliers.
（零件组件反过来可发送消息给他们自己的仓库和订单组件来更新他们的库存和从供应商订购新的零件。）
Both the factory and the parts components can send messages to the accounting component to update budget numbers.

The business can publish updated catalog items to its sales force.

Using messaging for these tasks allows the various components to interact with one another efficiently, without tying up network or other resources.
（通过使用messaging来完成这些任务可让各种各样的组件彼此高效地交互，而不必占用网络或者其他资源。）

Manufacturing is only one example of how an enterprise can use the JMS API. Retail applications, financial services applications, health services applications, and many others can make use of messaging.
（生产制造只是一个企业如何使用JMS API的一个例子。零售应用，金融服务应用，健康服务应用和很多其他应用都可 使用messaging。）
1.4 How Does the JMS API Work with the Java EE Platform?
When the JMS API was first introduced, its most important purpose was to allow Java applications to access existing messaging-oriented middleware (MOM) systems. Since that time, many vendors have adopted and implemented the JMS API, so a JMS product can now provide a complete messaging capability for an enterprise.

The JMS API is an integral part of the Java EE platform, and application developers can use messaging with Java EE components. JMS 2.0 is part of the Java EE 7 release.

The JMS API in the Java EE platform has the following features.

Application clients, Enterprise JavaBeans (EJB) components, and web components can send or synchronously receive a JMS message. Application clients can in addition set a message listener that allows JMS messages to be delivered to it asynchronously by being notified when a message is available.

Message-driven beans, which are a kind of enterprise bean, enable the asynchronous consumption of messages in the EJB container. An application server typically pools message-driven beans to implement concurrent processing of messages.

Message send and receive operations can participate in Java Transaction API (JTA) transactions, which allow JMS operations and database accesses to take place within a single transaction.

The JMS API enhances the other parts of the Java EE platform by simplifying enterprise development, allowing loosely coupled, reliable, asynchronous interactions among Java EE components and legacy systems capable of messaging. A developer can easily add new behavior to a Java EE application that has existing business events by adding a new message-driven bean to operate on specific business events. The Java EE platform, moreover, enhances the JMS API by providing support for JTA transactions and allowing for the concurrent consumption of messages. For more information, see the Enterprise JavaBeans specification, v3.2.

The JMS provider can be integrated with the application server using the Java EE Connector architecture. You access the JMS provider through a resource adapter. This capability allows vendors to create JMS providers that can be plugged in to multiple application servers, and it allows application servers to support multiple JMS providers. For more information, see the Java EE Connector architecture specification, v1.7.
